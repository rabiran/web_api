/// <reference types="node" />
import { Channel, Connection, amqp } from './internal';
export declare class Exchange {
    name: string;
    type: ExchangeType;
    options: amqp.Options.AssertExchange;
    channel: Channel;
    exchangeAsserted: boolean;
    constructor(connection: Connection, name: string, type: ExchangeType, options?: amqp.Options.AssertExchange);
    initialize(): Promise<void>;
    close(): Promise<void>;
    getNativeChannel(): amqp.ConfirmChannel;
    isInitialized(): boolean;
    send(content: Buffer | String | Object, routingKey?: string, properties?: ExchangeSendProperties): Promise<void>;
    private static publishHelper;
    delete(ifUnused?: boolean): Promise<void>;
    bind(source: Exchange | string, pattern?: string, args?: any): Promise<void>;
    static getTypes(): ExchangeType[];
}
export interface ExchangeSendProperties extends amqp.Options.Publish {
}
export declare type ExchangeType = 'fanout' | 'topic' | 'direct' | 'headers';
//# sourceMappingURL=exchange.d.ts.map