"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Channel = void 0;
const internal_1 = require("./internal");
class Channel {
    constructor(connection) {
        this.connection = connection;
        this.channel = null;
    }
    async initialize() {
        if (this.isInitialized()) {
            await this.close();
        }
        internal_1.assert(this.connection.isConnected());
        const channel = await this.connection.connection.createConfirmChannel();
        channel.once('error', (err) => {
            this.channel = null;
            internal_1.default.reportError('channel', err);
        });
        channel.once('close', () => {
            this.channel = null;
            internal_1.default.reportError('channel', new Error(`Channel closed`));
        });
        this.channel = channel;
    }
    async close() {
        if (!this.isInitialized()) {
            return;
        }
        const channel = this.getNativeChannel();
        this.channel = null;
        channel.removeAllListeners('error');
        channel.removeAllListeners('close');
        await channel.close().catch((err) => console.error(`Channel close failed with error:`, err));
    }
    isInitialized() {
        return !!this.channel;
    }
    async prefetch(count) {
        if (!this.isInitialized()) {
            throw new Error(`Channel is not initialized`);
        }
        if (this.prefetchCount === count) {
            return;
        }
        await this.getNativeChannel().prefetch(count);
        this.prefetchCount = count;
    }
    getNativeChannel() {
        if (!this.isInitialized()) {
            throw new Error('[BUG] Trying to get native channel, but Channel was closed or was not initialized yet');
        }
        internal_1.assert(this.channel);
        return this.channel;
    }
}
exports.Channel = Channel;
//# sourceMappingURL=channel.js.map