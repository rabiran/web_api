import { Exchange, Queue } from './internal';
export declare type Binding = {
    source: Exchange;
    destination: Exchange | Queue;
    pattern: string;
    args?: any;
};
export declare class BindingManager {
    bindings: Binding[];
    rebindAll(): Promise<void[]>;
    unbindAll(): Promise<void[]>;
    addBinding(source: Exchange, destination: Exchange | Queue, pattern: string, args?: any): Promise<void>;
    static bind(source: Exchange, destination: Exchange | Queue, pattern: string, args?: any): Promise<void>;
    static unbind(source: Exchange, destination: Exchange | Queue, pattern: string, args?: any): Promise<void>;
    removeBinding(source: Exchange, destination: Exchange | Queue, pattern: string, args?: any): Promise<void>;
    removeBindingFromArray(binding: Binding): void;
    unbindAllBindingsForEntity(entity: Exchange | Queue): Promise<void[]>;
    clearBindings(): void;
    findBinding(source: Exchange, destination: Exchange | Queue, pattern?: string, args?: any): Binding | undefined;
    static isSameEntity(first: Exchange | Queue, second: Exchange | Queue): boolean;
    static byEntity(entity: Exchange | Queue): (binding: Binding) => boolean;
    static bySourcePredicate(source: Exchange): (binding: Binding) => boolean;
    static byDestinationPredicate(destination: Exchange | Queue): (binding: Binding) => boolean;
    static bySourceAndDestinationPredicate(source: Exchange, destination: Exchange | Queue): (binding: Binding) => boolean;
    static byExactMatch(source: Exchange, destination: Exchange | Queue, pattern?: string, args?: any): (binding: Binding) => boolean;
}
//# sourceMappingURL=binding.d.ts.map