/// <reference types="node" />
import { QueueSendProperties, ExchangeSendProperties, Connection, Queue, Exchange, EventEmitter, BindingManager, amqp, ExchangeType, pRetry, QueueOptions, ConsumeFunction } from './internal';
export declare class Client extends EventEmitter {
    connection: Connection | null;
    exchanges: {
        [name: string]: Exchange;
    };
    queues: {
        [name: string]: Queue;
    };
    bindings: BindingManager;
    retryOptions: pRetry.Options;
    isReady: boolean;
    isClosed: boolean;
    constructor();
    connect(url: string | amqp.Options.Connect, retryOptions?: pRetry.Options, socketOptions?: any): Promise<void>;
    private static initializeConnectionWithRetries;
    private initialize;
    private initializeHelper;
    close(): Promise<void>;
    private closeAllQueues;
    private closeAllExchanges;
    waitForInitialize(): Promise<void>;
    reportError(source: ErrorSource, err: Error): void;
    declareExchange(name: string, type: ExchangeType, options?: amqp.Options.AssertExchange): Promise<Exchange>;
    declareQueue(name: string, options?: amqp.Options.AssertQueue): Promise<Queue>;
    queue(name: string): Queue;
    exchange(name: string): Exchange;
    declareTopology(topology: Topology): Promise<void>;
    private declareQueues;
    private declareExchanges;
    private applyBindings;
    private activateConsumers;
    private rebuildTopology;
    deleteExchange(name: string, ifUnused?: boolean): Promise<void>;
    deleteQueue(name: string, options?: amqp.Options.DeleteQueue): Promise<void>;
    private getEntityByName;
    bind(source: Exchange | string, destination: Exchange | Queue | string, pattern?: string, args?: any): Promise<void>;
    send(entityName: string, content: string | Object | Buffer, properties?: ExchangeSendProperties | QueueSendProperties, routingKey?: string): Promise<void>;
}
export declare const tryOnce: (func: Function, source: ErrorSource) => Promise<any>;
export declare namespace Topology {
    interface ExchangeParams {
        name: string;
        type: ExchangeType;
        options?: amqp.Options.AssertExchange;
    }
    interface QueueParams {
        name: string;
        options?: QueueOptions;
    }
    interface BindingParams {
        source: string;
        destination: string;
        pattern?: string;
        args?: any;
    }
    interface ConsumerParams {
        queueName: string;
        onMessage: ConsumeFunction;
        options?: amqp.Options.Consume;
    }
}
export interface Topology {
    exchanges?: Topology.ExchangeParams[];
    queues?: Topology.QueueParams[];
    bindings?: Topology.BindingParams[];
    consumers?: Topology.ConsumerParams[];
}
export declare type ErrorSource = 'connection' | 'channel' | 'queue' | 'consumer' | 'exchange';
//# sourceMappingURL=client.d.ts.map